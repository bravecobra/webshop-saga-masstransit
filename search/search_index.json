{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Example Webshop using microservices and masstransit Description This repository contains a webshop using microservices written in C# with masstransit. It serves as an experiment to figure out the workings of masstransit concerning distributed saga's using Courier, Scheduling and statemachines.","title":"Home"},{"location":"#example-webshop-using-microservices-and-masstransit","text":"","title":"Example Webshop using microservices and masstransit"},{"location":"#description","text":"This repository contains a webshop using microservices written in C# with masstransit. It serves as an experiment to figure out the workings of masstransit concerning distributed saga's using Courier, Scheduling and statemachines.","title":"Description"},{"location":"license/","text":"MIT License Copyright (c) 2020 Giovanni Van Geel Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright (c) 2020 Giovanni Van Geel Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"release-notes/","text":"","title":"Release Notes"},{"location":"analysis/functional-usecases/","text":"Functional UseCases Shopowner creates a Product in the Catalog (Event: NewProductEntered) in Products (=MT-Courier Example -> transactional) Create a new Product (Event: NewProductCreated) in Catalog Create a Price for the Product in Pricing (Event: ProductPriceUpdated) -> Update priceinfo back to Catalog . Create an StockEntry for the Product in the Warehouse (Event: StockAmountUpdated) -> updates stockinfo in Catalog . Shopowner modifies the Price for a Product (Event: ProductPriceRequested) in Pricing Update Price (Event: ProductPriceUpdated) Update Product 's priceInfo in catalog Shopowner modifies a StockEntry for a Product (Event: StockAmountRequested) in WareHouse Update stockamount (Event: StockAmountUpdated) 1. (Event: StockAmountUpdated) -> Update Product 's availability in catalog Customer browses the Catalog viewing products, prices and availability (Query in Products) Customer manages the content of a ShoppingCart Add a product and amount to a ShoppingCart (Event: ProductAdded) Create ShoppingCart if not exists Add a product to a ShoppingCart Remove a product from a ShoppingCart (Event: ProductRemoved) Change amount of a product in a ShoppingCart (Event: ProductAmountChanged) Customer reviews ShoppingCart details (Query) Fetch current pricing (optional) (Query in Pricing) Recheck availability stock (optional) (Query in WareHouse) Customer submits an SalesTransaction based of current ShoppingCart (Event: ShoppingCartSubmitted) -> MT-Courier Start new SalesTransaction based on submitted ShoppingCart Update pricing of SalesTransaction (Event: PriceUpdateRequested) -> IRequest Set status of ShoppingCart to submitted (Event: SalesTransactionStarted) Create Delivery in stock with status requested (StockProductRequested) Create Payment with status unpayed Set status of SalesTransaction to started Shopowner reserves the products for a Delivery Reserve products from WareHouse (Event: StockProductReserved) they still remain in the warehouse. They are marked as sold (linked deliveryId) and are thus available not for purchase. Update availability amount (Event: ProductStockChanged) Update catalog availability Set Delivery to status reserved Customer provides shipping details for the Delivery (Event: ShippingDetailChanged) Store shipping details for Delivery Set Status of Delivery to shippable Set status of SalesTransaction to InProgress(=reserved/unpayed) Customer pays for an order (Event: PaymentSubmitted) Receive payment Set Payment status to payed Set SalesTransaction status to purchased (Event SalesTransactionPurchased ) Send notification of purchase to Customer Customer cancels pending SalesTransaction (Event: SalesTransactionCancelRequested ) -> MT-Courier Activity Refund in Pricing Activity Cancel Delivery in Delivery Set SalesTransaction to status to cancelled Shopowner starts Delivery (backend Event based on SalesTransactionPurchased ) Checkout from stock and ship Delivery Set Delivery status to in progress Set SalesTransaction to status shipped Send notification of shipment Customer receives notification of purchase Shopowner delivers the delivery Set Delivery to status delivered Set SalesTransaction to status closed Customer receives notification of delivery Services Catalog Service Checkout Service/ Sales Delivery Service Notifications Ordering Service The ordering service keeps track of the shoppingcart, before they are converted into an order. Pricing Service WareHouse","title":"Use cases"},{"location":"analysis/functional-usecases/#functional-usecases","text":"Shopowner creates a Product in the Catalog (Event: NewProductEntered) in Products (=MT-Courier Example -> transactional) Create a new Product (Event: NewProductCreated) in Catalog Create a Price for the Product in Pricing (Event: ProductPriceUpdated) -> Update priceinfo back to Catalog . Create an StockEntry for the Product in the Warehouse (Event: StockAmountUpdated) -> updates stockinfo in Catalog . Shopowner modifies the Price for a Product (Event: ProductPriceRequested) in Pricing Update Price (Event: ProductPriceUpdated) Update Product 's priceInfo in catalog Shopowner modifies a StockEntry for a Product (Event: StockAmountRequested) in WareHouse Update stockamount (Event: StockAmountUpdated) 1. (Event: StockAmountUpdated) -> Update Product 's availability in catalog Customer browses the Catalog viewing products, prices and availability (Query in Products) Customer manages the content of a ShoppingCart Add a product and amount to a ShoppingCart (Event: ProductAdded) Create ShoppingCart if not exists Add a product to a ShoppingCart Remove a product from a ShoppingCart (Event: ProductRemoved) Change amount of a product in a ShoppingCart (Event: ProductAmountChanged) Customer reviews ShoppingCart details (Query) Fetch current pricing (optional) (Query in Pricing) Recheck availability stock (optional) (Query in WareHouse) Customer submits an SalesTransaction based of current ShoppingCart (Event: ShoppingCartSubmitted) -> MT-Courier Start new SalesTransaction based on submitted ShoppingCart Update pricing of SalesTransaction (Event: PriceUpdateRequested) -> IRequest Set status of ShoppingCart to submitted (Event: SalesTransactionStarted) Create Delivery in stock with status requested (StockProductRequested) Create Payment with status unpayed Set status of SalesTransaction to started Shopowner reserves the products for a Delivery Reserve products from WareHouse (Event: StockProductReserved) they still remain in the warehouse. They are marked as sold (linked deliveryId) and are thus available not for purchase. Update availability amount (Event: ProductStockChanged) Update catalog availability Set Delivery to status reserved Customer provides shipping details for the Delivery (Event: ShippingDetailChanged) Store shipping details for Delivery Set Status of Delivery to shippable Set status of SalesTransaction to InProgress(=reserved/unpayed) Customer pays for an order (Event: PaymentSubmitted) Receive payment Set Payment status to payed Set SalesTransaction status to purchased (Event SalesTransactionPurchased ) Send notification of purchase to Customer Customer cancels pending SalesTransaction (Event: SalesTransactionCancelRequested ) -> MT-Courier Activity Refund in Pricing Activity Cancel Delivery in Delivery Set SalesTransaction to status to cancelled Shopowner starts Delivery (backend Event based on SalesTransactionPurchased ) Checkout from stock and ship Delivery Set Delivery status to in progress Set SalesTransaction to status shipped Send notification of shipment Customer receives notification of purchase Shopowner delivers the delivery Set Delivery to status delivered Set SalesTransaction to status closed Customer receives notification of delivery","title":"Functional UseCases"},{"location":"analysis/functional-usecases/#services","text":"","title":"Services"},{"location":"analysis/functional-usecases/#catalog-service","text":"","title":"Catalog Service"},{"location":"analysis/functional-usecases/#checkout-service-sales","text":"","title":"Checkout Service/ Sales"},{"location":"analysis/functional-usecases/#delivery-service","text":"","title":"Delivery Service"},{"location":"analysis/functional-usecases/#notifications","text":"","title":"Notifications"},{"location":"analysis/functional-usecases/#ordering-service","text":"The ordering service keeps track of the shoppingcart, before they are converted into an order.","title":"Ordering Service"},{"location":"analysis/functional-usecases/#pricing-service","text":"","title":"Pricing Service"},{"location":"analysis/functional-usecases/#warehouse","text":"","title":"WareHouse"}]}